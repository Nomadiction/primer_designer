# frontend/utils/visualize_vector.py
from dna_features_viewer import GraphicFeature, GraphicRecord, CircularGraphicRecord
import matplotlib.pyplot as plt
from backend.ncbi_fetch import download_pUC18
from backend.vector_analysis import find_restriction_sites


def visualize_vector(insert_seq=None, chosen_site=None, used_enzymes=None, output_path="primer_map_vector.png"):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É –≤–µ–∫—Ç–æ—Ä–∞ pUC18 —Å —É—á–µ—Ç–æ–º –≤—Å—Ç–∞–≤–∫–∏ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω chosen_site –∏ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∞–π—Ç —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏, 
    —Ç–æ –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏, –∏–Ω–∞—á–µ –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –Ω–∞—á–∞–ª–æ –æ–±–ª–∞—Å—Ç–∏ MCS (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 396 bp).
    
    –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –ø–æ—Å–ª–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏, —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ –¥–ª–∏–Ω—É –≤—Å—Ç–∞–≤–ª—è–µ–º–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    –ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å MCS –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Ç–æ—á–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏, –æ–Ω–∞ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞ pUC18
    pUC18_record = download_pUC18()
    if not pUC18_record:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å pUC18!")
        return

    vector_seq = pUC18_record.seq
    vector_length = len(vector_seq)
    new_length = vector_length  # –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ç, –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å MCS –¥–ª—è pUC18 
    mcs_start = 396
    mcs_end = 471

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏
    unique_sites = find_restriction_sites(vector_seq)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω—É –≤–µ–∫—Ç–æ—Ä–∞
    if insert_seq:
        insert_length = len(insert_seq)
        if chosen_site and chosen_site in unique_sites and unique_sites[chosen_site]:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–∞–π—Ç —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –µ–≥–æ –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            insertion_position = unique_sites[chosen_site][0]
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –æ–±–ª–∞—Å—Ç–∏ MCS
            insertion_position = mcs_start

        new_length = vector_length + insert_length
        features = []

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞ –¥–æ –≤—Å—Ç–∞–≤–∫–∏
        features.append(GraphicFeature(start=0, end=insertion_position, strand=0,
                                       color="#eeeeee", label="pUC18"))
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ (—Å —É—á–µ—Ç–æ–º —Å–¥–≤–∏–≥–∞)
        features.append(GraphicFeature(start=insertion_position + insert_length, end=new_length, strand=0,
                                       color="#eeeeee", label="pUC18"))
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º—É –≤—Å—Ç–∞–≤–∫—É
        features.append(GraphicFeature(start=insertion_position,
                                       end=insertion_position + insert_length, strand=+1,
                                       color="#ff9999", label="Insertion"))
        # –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä—å –æ–±–ª–∞—Å—Ç–∏ MCS, –¥–µ–ª–∏–º MCS –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        if mcs_start < insertion_position < mcs_end:
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å MCS –¥–æ –≤—Å—Ç–∞–≤–∫–∏
            features.append(GraphicFeature(start=mcs_start, end=insertion_position, strand=0,
                                           color="lightblue", label="MCS"))
            # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å MCS –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ (—Å–¥–≤–∏–Ω—É—Ç–∞—è)
            features.append(GraphicFeature(start=insertion_position + insert_length, end=mcs_end + insert_length, strand=0,
                                           color="lightblue"))
    else:
        # –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∏ –Ω–µ—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Å—å –≤–µ–∫—Ç–æ—Ä
        features = [GraphicFeature(start=0, end=vector_length, strand=0, color="#eeeeee", label="pUC18")]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç—ã —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—è –∏—Ö –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
    for enzyme, sites in unique_sites.items():
        if used_enzymes and enzyme not in used_enzymes:
            continue
        site = sites[0] if isinstance(sites, list) and sites else None
        if site is not None:
            if insert_seq and site >= insertion_position:
                adjusted_site = site + insert_length
            else:
                adjusted_site = site
            features.append(GraphicFeature(start=adjusted_site, end=adjusted_site + 1, strand=0,
                                           color="#6699cc", label=str(enzyme)))

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: –ª–∏–Ω–µ–π–Ω—É—é –∏ –∫—Ä—É–≥–æ–≤—É—é –∫–∞—Ä—Ç—ã
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
    # –õ–∏–Ω–µ–π–Ω–∞—è –∫–∞—Ä—Ç–∞
    GraphicRecord(sequence_length=new_length, features=features).plot(ax=ax1, with_ruler=True)
    ax1.set_title("Linear map of vector pUC18")
    # –ö—Ä—É–≥–æ–≤–∞—è –∫–∞—Ä—Ç–∞
    CircularGraphicRecord(sequence_length=new_length, features=features).plot(ax=ax2)
    ax2.set_title("Circular map of vector pUC18")
    
    plt.tight_layout()
    plt.savefig(output_path, dpi=300)
    print(f"üß¨ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {output_path}")
    return fig


