# frontend/gui.py
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, simpledialog, ttk
import os
import time
import numpy as np
from Bio import SeqIO
from itertools import combinations
from backend.ncbi_fetch import download_pUC18
from backend.vector_analysis import find_restriction_sites
from backend.primer_tools import generate_primers, check_tm_difference
import matplotlib.pyplot as plt

# –ö–∞—Ç–∞–ª–æ–≥ —Å –¥–∞–Ω–Ω—ã–º–∏
DATA_FOLDER = "data"

class PrimerDesignerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("pUC18 Primer Designer")
        self.root.geometry("700x500")
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
        top_frame = tk.Frame(root)
        top_frame.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–∫—Ç–æ—Ä–µ
        self.info_button = tk.Button(top_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–∫—Ç–æ—Ä–µ", command=self.show_vector_info)
        self.info_button.pack(side=tk.LEFT, padx=5)
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –≤—Å—Ç–∞–≤–∫–∏
        tk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏:").pack(pady=5)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞
        button_frame = tk.Frame(root)
        button_frame.pack(pady=5)

        self.upload_button = tk.Button(button_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", command=self.load_sequence)
        self.upload_button.pack(side=tk.LEFT, padx=5)

        self.auto_load_button = tk.Button(button_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–∞–ø–∫–∏", command=self.auto_load_sequence)
        self.auto_load_button.pack(side=tk.LEFT, padx=5)

        self.analyze_button = tk.Button(button_frame, text="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", command=self.analyze, state=tk.DISABLED)
        self.analyze_button.pack(side=tk.LEFT, padx=5)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.result_text = scrolledtext.ScrolledText(root, width=80, height=15)
        self.result_text.pack(pady=5)

        self.plot_button = tk.Button(root, text="–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –≤–µ–∫—Ç–æ—Ä–∞", command=self.plot_vector, state=tk.DISABLED)
        self.plot_button.pack(pady=5)

        self.progress = ttk.Progressbar(root, orient="horizontal", length=300, mode="determinate")
        self.progress.pack(pady=10)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.insert_seq = None
        self.selected_sites = {}
        # –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞—Ä–∞ —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–µ–∫–æ–º–±–∏–Ω–∞–Ω—Ç–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
        self.chosen_pair = None
        self.insertion_start = None
        self.insertion_end = None

    def show_vector_info(self):
            info_text = (
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–∫—Ç–æ—Ä–µ pUC18:\n\n"
                "‚Ä¢ pUC18 ‚Äì –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–ª–∞–∑–º–∏–¥–Ω—ã–π –≤–µ–∫—Ç–æ—Ä, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∞–∫—Ç–µ—Ä–∏—è—Ö (E. coli).\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≥–µ–Ω–æ–º–∞, –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫—É—é –∫–æ–ø–∏—é –∏ —Å–∏—Å—Ç–µ–º—É blue/white screening.\n"
                "‚Ä¢ –í—Å—Ç–∞–≤–ª—è–µ–º—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n"
                "   ‚Äì –û–±–ª–∞—Å—Ç—å –≥–æ–º–æ–ª–æ–≥–∏–∏ (–º–∏–Ω–∏–º—É–º 16 –Ω—É–∫–ª–µ–æ—Ç–∏–¥–æ–≤),\n"
                "   ‚Äì –†–µ—Å—Ç—Ä–∏–∫—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–π—Ç (–¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è),\n"
                "   ‚Äì –ù–∞–≤–µ—Å–∫–∞ (1‚Äì5 –Ω—É–∫–ª–µ–æ—Ç–∏–¥–æ–≤) –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—Å—Ç—Ä–∏–∫—Ç–∞–∑–æ–π.\n\n"
                "–ü–µ—Ä–µ–¥ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –≤–æ –≤—Å—Ç–∞–≤–ª—è–µ–º–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
            )
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–∫—Ç–æ—Ä–µ pUC18", info_text)

    def slow_print(self, text):
        """–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ ¬´–∂–∏–≤–æ–≥–æ¬ª –≤—ã–≤–æ–¥–∞."""
        for char in text:
            self.result_text.insert(tk.END, char)
            self.result_text.see(tk.END)
            self.root.update()
            time.sleep(0.01)

    def find_fasta_in_data(self):
        """
        –ò—â–µ—Ç —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .fasta –≤ –∫–∞—Ç–∞–ª–æ–≥–µ DATA_FOLDER.
        –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω —Ñ–∞–π–ª ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –ø—É—Ç—å, –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å.
        """
        if not os.path.exists(DATA_FOLDER):
            os.makedirs(DATA_FOLDER)
        fasta_files = [f for f in os.listdir(DATA_FOLDER) if f.endswith(".fasta")]
        if not fasta_files:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í –ø–∞–ø–∫–µ 'data' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ .fasta!")
            return None
        if len(fasta_files) == 1:
            return os.path.join(DATA_FOLDER, fasta_files[0])
        choice = simpledialog.askstring("–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞",
                                        f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤:\n{', '.join(fasta_files)}\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞:")
        if choice in fasta_files:
            return os.path.join(DATA_FOLDER, choice)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return None

    def auto_load_sequence(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ DATA_FOLDER."""
        file_path = self.find_fasta_in_data()
        if file_path:
            self.load_sequence(file_path)

    def load_sequence(self, file_path=None):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ FASTA.
        –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.
        """
        if file_path is None:
            file_path = filedialog.askopenfilename(filetypes=[("FASTA files", "*.fasta"), ("All files", "*.*")])
        if file_path:
            try:
                self.insert_seq = SeqIO.read(file_path, "fasta").seq
                self.result_text.delete(1.0, tk.END)  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.selected_sites = {}  # –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
                self.slow_print(f"üî¨ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(self.insert_seq)} bp\n")
                self.analyze_button.config(state=tk.NORMAL)
            except Exception:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")

    def select_restriction_sites(self, unique_sites):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É.
        """
        self.selected_sites = {}
        select_window = tk.Toplevel(self.root)
        select_window.title("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç—ã —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏")
        select_window.geometry("300x400")
        check_vars = {enzyme: tk.BooleanVar() for enzyme in unique_sites}

        def toggle_all():
            """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã."""
            state = select_all_var.get()
            for var in check_vars.values():
                var.set(state)

        def save_selection():
            """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ."""
            self.selected_sites = {enzyme: unique_sites[enzyme] for enzyme, var in check_vars.items() if var.get()}
            select_window.destroy()

        # –ß–µ–∫–±–æ–∫—Å "–í—ã–±—Ä–∞—Ç—å –≤—Å—ë"
        select_all_var = tk.BooleanVar()
        select_all_cb = tk.Checkbutton(select_window, text="–í—ã–±—Ä–∞—Ç—å –≤—Å—ë", variable=select_all_var, command=toggle_all)
        select_all_cb.pack(anchor="w", padx=10, pady=5)

        # –°–æ–∑–¥–∞—ë–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–µ—Ä–º–µ–Ω—Ç–∞
        for enzyme, var in check_vars.items():
            chk = tk.Checkbutton(select_window, text=enzyme, variable=var)
            chk.pack(anchor='w', padx=20)
        btn_save = tk.Button(select_window, text="–í—ã–±—Ä–∞—Ç—å", command=save_selection)
        btn_save.pack(pady=10)
        select_window.wait_window()

    def analyze(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:
         1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å pUC18 (–≤–µ–∫—Ç–æ—Ä) –∏–∑ NCBI.
         2. –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–µ.
         3. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∞–π—Ç—ã.
         4. –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä—ã —Å–∞–π—Ç–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
         5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–π–º–µ—Ä—ã –∏ –æ—Ç–±–∏—Ä–∞–µ—Ç –ø–∞—Ä—ã —Å –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Ä–∞–∑–Ω–∏—Ü–µ–π Tm.
        """
        if not self.insert_seq:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
            return

        self.progress["value"] = 0
        self.root.update()
        self.progress["value"] = 25
        self.root.update()

        pUC18_record = download_pUC18()
        if not pUC18_record:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å pUC18!")
            return

        self.progress["value"] = 45
        self.root.update()

        unique_sites = find_restriction_sites(pUC18_record.seq)
        self.select_restriction_sites(unique_sites)
        if not self.selected_sites:
            self.slow_print("\n‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–∞–π—Ç—ã —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏!\n")
            return

        self.progress["value"] = 65
        self.root.update()

        # –û—Ç–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã —Å–∞–π—Ç–æ–≤, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 40‚Äì200 bp
        selected_pairs = [
            ((enzyme1, site1), (enzyme2, site2), abs(site1 - site2))
            for (enzyme1, site1), (enzyme2, site2) in combinations(self.selected_sites.items(), 2)
            if 40 <= abs(site1 - site2) <= 200
        ]
        self.slow_print("\nüî¨ –ê–Ω–∞–ª–∏–∑ pUC18 –∑–∞–≤–µ—Ä—à—ë–Ω.\n")
        if selected_pairs:
            self.slow_print("\n‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏:\n")
            for (enzyme1, site1), (enzyme2, site2), distance in selected_pairs:
                self.slow_print(f"üîπ {enzyme1} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {site1}\n")
                self.slow_print(f"üîπ {enzyme2} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {site2}\n")
                self.slow_print(f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–∞–π—Ç–∞–º–∏: {distance} bp\n\n")
            self.progress["value"] = 85
            self.root.update()

            primers = generate_primers(self.insert_seq, selected_pairs)
            valid_primers = check_tm_difference(primers, max_tm_diff=3)

            self.slow_print("\n‚úÖ –ü—Ä–∞–π–º–µ—Ä—ã —Å –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Ä–∞–∑–Ω–∏—Ü–µ–π Tm:\n")
            for enzyme1, forward, tm1, enzyme2, reverse, tm2 in valid_primers:
                self.slow_print(f"üîπ –ü—Ä—è–º–æ–π ({enzyme1}): {forward} (Tm: {tm1}¬∞C)\n")
                self.slow_print(f"üîπ –û–±—Ä–∞—Ç–Ω—ã–π ({enzyme2}): {reverse} (Tm: {tm2}¬∞C)\n")
            self.plot_button.config(state=tk.NORMAL)
        else:
            self.slow_print("\n‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∞–π—Ç–æ–≤ —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏!\n")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–∞—Ä—É —Å–∞–π—Ç–æ–≤.")

        self.progress["value"] = 100
        self.root.update()

    def plot_vector(self):
        """
        –°—Ç—Ä–æ–∏—Ç –ø–æ–ª—è—Ä–Ω—É—é –∫–∞—Ä—Ç—É –≤–µ–∫—Ç–æ—Ä–∞ pUC18.
        –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ –∏ –≤—ã–±—Ä–∞–Ω—ã —Å–∞–π—Ç—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ä–µ–∫–æ–º–±–∏–Ω–∞–Ω—Ç–Ω—ã–π –≤–µ–∫—Ç–æ—Ä:
          —É—á–∞—Å—Ç–æ–∫ –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –≤—Å—Ç–∞–≤–∫—É.
        –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ä–µ–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–∞–π—Ç—ã —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π –≤–µ–∫—Ç–æ—Ä.
        –í—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –∫—Ä–∞—Å–Ω–æ–π –¥—É–≥–æ–π.
        """
        pUC18_record = download_pUC18()
        if not pUC18_record:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å pUC18!")
            return

        vector_seq = pUC18_record.seq

        if self.insert_seq and self.selected_sites:
            chosen_sites = list(self.selected_sites.values())
            insertion_start = min(chosen_sites)
            insertion_end = max(chosen_sites)
            new_vector = vector_seq[:insertion_start] + self.insert_seq + vector_seq[insertion_end:]
            insert_start_new = insertion_start
            insert_end_new = insertion_start + len(self.insert_seq)
        else:
            new_vector = vector_seq
            insert_start_new = None

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –≤ –Ω–æ–≤–æ–º –≤–µ–∫—Ç–æ—Ä–µ
        unique_sites = find_restriction_sites(new_vector)
        if not unique_sites:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–π—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
            unique_sites = find_restriction_sites(vector_seq)
            if not unique_sites:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°–∞–π—Ç—ã —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                return

        sequence_length = len(new_vector)
        fig, ax = plt.subplots(figsize=(7, 7), subplot_kw={'projection': 'polar'})
        theta = np.linspace(0, 2 * np.pi, 100)
        ax.plot(theta, [1] * 100, color="black", linewidth=2)
        colors = plt.cm.get_cmap("tab10", len(unique_sites))
        for i, (enzyme, site) in enumerate(sorted(unique_sites.items(), key=lambda x: x[1])):
            angle = (site / sequence_length) * 2 * np.pi
            ax.scatter(angle, 1, color=colors(i), s=100, label=f"{enzyme}")

        if insert_start_new is not None:
            angle_start = (insert_start_new / sequence_length) * 2 * np.pi
            angle_end = (insert_end_new / sequence_length) * 2 * np.pi
            ax.plot([angle_start, angle_end], [1, 1], color="red", linewidth=6, label="–í—Å—Ç–∞–≤–∫–∞")

        ax.legend(loc="lower center", bbox_to_anchor=(0.5, -0.2), ncol=3, fontsize=10)
        ax.set_xticklabels([])
        ax.set_yticklabels([])
        ax.set_yticks([])
        ax.spines['polar'].set_visible(False)
        plt.title("–ö–∞—Ä—Ç–∞ –≤–µ–∫—Ç–æ—Ä–∞ pUC18", fontsize=14)
        plt.show()

if __name__ == "__main__":
    root = tk.Tk()
    app = PrimerDesignerApp(root)
    root.mainloop()

