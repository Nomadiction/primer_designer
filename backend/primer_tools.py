# backend/primer_tools.py

from Bio.Seq import Seq
from Bio.SeqUtils import MeltingTemp as mt
import random

def generate_primers(insert_seq, chosen_sites, min_homology=20, logger=print, min_len=18, max_len=35):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–π–º–µ—Ä–æ–≤ —Å —Å–∞–π—Ç–∞–º–∏ —Ä–µ—Å—Ç—Ä–∏–∫—Ü–∏–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [(enzyme1, forward_primer, forward_effective, enzyme2, reverse_primer, reverse_effective), ...]
    """
    primers = []
    effective_length = min(len(insert_seq), min_homology)

    for enzyme1, enzyme2 in chosen_sites:
        recognition_seq1 = enzyme1.site
        recognition_seq2 = enzyme2.site

        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Å–∞–π—Ç —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å—Ç–∞–≤–∫–µ
        if recognition_seq1 in insert_seq or recognition_seq2 in insert_seq:
            logger(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–∞—Ä–∞ {enzyme1} –∏ {enzyme2}: —Å–∞–π—Ç —É–∂–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Å—Ç–∞–≤–∫–µ.")
            continue

        # Padding –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω—É–∫–ª–µ–æ—Ç–∏–¥–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç—Ä–µ–∑–∫–∏ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–º
        forward_padding = random_padding_with_gc()
        reverse_padding = random_padding_with_gc()

        forward_effective = str(insert_seq[:effective_length])
        reverse_effective = str(Seq(insert_seq[-effective_length:]).reverse_complement())

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ GC –≤ –Ω–∞—á–∞–ª–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ GC
        forward_effective = balance_gc(forward_effective)
        reverse_effective = balance_gc(reverse_effective)

        forward_primer = f'{forward_padding}{recognition_seq1}{forward_effective}'
        reverse_primer = f'{reverse_padding}{recognition_seq2}{reverse_effective}'

        # –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–ª–∏–Ω—ã
        if not (min_len <= len(forward_primer) <= max_len and min_len <= len(reverse_primer) <= max_len):
            logger(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–∞—Ä–∞ {enzyme1}-{enzyme2}: –¥–ª–∏–Ω–∞ –ø—Ä–∞–π–º–µ—Ä–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
            continue

        logger(f"üîπ –ü–∞—Ä–∞ {enzyme1} - {enzyme2}:")
        logger(f"  ‚û§ Forward: {forward_primer}")
        logger(f"  ‚û§ Reverse: {reverse_primer}")

        primers.append((enzyme1, forward_primer, forward_effective,
                        enzyme2, reverse_primer, reverse_effective))
    return primers


def random_padding_with_gc():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –≤—Å—Ç–∞–≤–∫—É –∏–∑ 1-5 –Ω—É–∫–ª–µ–æ—Ç–∏–¥–æ–≤, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É G –∏–ª–∏ C
    """
    length = random.randint(1, 5)
    padding = ''.join(random.choices("AGCT", k=length))
    if 'G' not in padding and 'C' not in padding:
        padding = 'G' + padding[1:]
    return padding


def balance_gc(seq):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç GC –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ GC –Ω–∏–∂–µ 50%
    """
    gc_count = seq.count('G') + seq.count('C')
    if gc_count < len(seq) // 2:
        return 'GC' + seq
    return seq


def calculate_tm(effective_seq):
    """
    –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∞–π–º–µ—Ä–∞.
    –ö–æ—Ä–æ—Ç–∫–∏–µ ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞, –¥–ª–∏–Ω–Ω—ã–µ ‚Äî Nearest Neighbor.
    """
    effective_seq = Seq(effective_seq)
    length = len(effective_seq)
    if length <= 20:
        return 4 * (effective_seq.count('G') + effective_seq.count('C')) + 2 * (effective_seq.count('A') + effective_seq.count('T'))
    else:
        return mt.Tm_NN(effective_seq, dnac1=25, dnac2=25, Na=50, saltcorr=5)


def check_3prime_end(primer):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ 3'-–∫–æ–Ω–µ—Ü –ù–ï –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ T
    """
    return primer[-1].upper() != 'T'


def check_hairpin(primer, min_stem=4, loop_size=3):
    """
    –ü–æ–∏—Å–∫ —à–ø–∏–ª—å–∫–∏ (hairpin) –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –æ–±—Ä–∞—Ç–Ω–æ–∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ —Å –ø–µ—Ç–ª—ë–π
    """
    seq = primer.upper()
    L = len(seq)
    for i in range(L - (2 * min_stem + loop_size) + 1):
        max_stem = (L - i - loop_size) // 2
        for stem_len in range(min_stem, max_stem + 1):
            left = seq[i:i + stem_len]
            right_start = i + stem_len + loop_size
            right = seq[right_start:right_start + stem_len]
            if left == str(Seq(right).reverse_complement()):
                return True
    return False


def check_primer_dimer(forward, reverse, dimer_length=4):
    """
    –ü–æ–∏—Å–∫ –¥–∏–º–µ—Ä–æ–≤ –Ω–∞ 3‚Äô-–∫–æ–Ω—Ü–∞—Ö forward –∏ reverse –ø—Ä–∞–π–º–µ—Ä–æ–≤
    """
    f_end = forward[-dimer_length:].upper()
    r_end = reverse[-dimer_length:].upper()
    r_end_rc = str(Seq(r_end).reverse_complement())
    return f_end in r_end_rc


def check_secondary_structure(forward, reverse, logger=print):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–∏—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
    - Hairpins
    - Primer-dimers
    - T –Ω–∞ 3'-–∫–æ–Ω—Ü–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    """
    issues = False
    if not check_3prime_end(forward):
        logger("‚ö†Ô∏è Forward –ø—Ä–∞–π–º–µ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ T.")
    if not check_3prime_end(reverse):
        logger("‚ö†Ô∏è Reverse –ø—Ä–∞–π–º–µ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ T.")
    if check_hairpin(forward):
        logger("‚ùå Forward –ø—Ä–∞–π–º–µ—Ä –æ–±—Ä–∞–∑—É–µ—Ç —à–ø–∏–ª—å–∫—É.")
        issues = True
    if check_hairpin(reverse):
        logger("‚ùå Reverse –ø—Ä–∞–π–º–µ—Ä –æ–±—Ä–∞–∑—É–µ—Ç —à–ø–∏–ª—å–∫—É.")
        issues = True
    if check_primer_dimer(forward, reverse):
        logger("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∞–π–º–µ—Ä–Ω—ã–π –¥–∏–º–µ—Ä –º–µ–∂–¥—É forward –∏ reverse.")
        issues = True
    return not issues


def check_tm_difference(primers, max_tm_diff=5, logger=print):
    """
    –û—Ç–±–æ—Ä –ø—Ä–∞–π–º–µ—Ä–æ–≤ —Å –¥–æ–ø—É—Å—Ç–∏–º–æ–π ŒîTm –∏ –±–µ–∑ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä—ã.
    """
    valid_pairs = []
    for enzyme1, forward, forward_eff, enzyme2, reverse, reverse_eff in primers:
        tm1 = calculate_tm(forward_eff)
        tm2 = calculate_tm(reverse_eff)
        delta_tm = abs(tm1 - tm2)

        logger(f"üîç –ü–∞—Ä–∞ {enzyme1} - {enzyme2}: Tm_forward = {tm1:.1f}¬∞C, Tm_reverse = {tm2:.1f}¬∞C")

        if delta_tm <= max_tm_diff and check_secondary_structure(forward, reverse, logger):
            logger("‚úÖ –ü–∞—Ä–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n")
            valid_pairs.append((enzyme1, forward, tm1, enzyme2, reverse, tm2))
        else:
            logger(f"‚ùå –ü–∞—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: ŒîTm={delta_tm:.1f}¬∞C –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.\n")
    return valid_pairs
